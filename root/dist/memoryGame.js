/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/Games/memoryGame.js":
/*!*************************************!*\
  !*** ./scripts/Games/memoryGame.js ***!
  \*************************************/
/***/ (() => {

eval("\r\n\r\n//audio controller for all kinds of moves and matches\r\n\r\nclass AudioController {\r\n  \r\n  constructor() {\r\n      this.bgMusic = new Audio('../../Assests/Audio/creepy.mp3');\r\n      this.flipSound = new Audio('../../Assests/Audio/flip.wav');\r\n      this.matchSound = new Audio('../../Assests/Audio/match.wav');\r\n      this.victorySound = new Audio('../../Assests/Audio/victory.wav');\r\n      this.gameOverSound = new Audio('../../Assests/Audio/gameOver.wav');\r\n      this.bgMusic.volume = 0.5;\r\n      this.bgMusic.loop = true;\r\n  }\r\n  startMusic() {\r\n      this.bgMusic.play();\r\n  }\r\n  stopMusic() {\r\n      this.bgMusic.pause();\r\n      this.bgMusic.currentTime = 0;\r\n  }\r\n  flip() {\r\n      this.flipSound.play();\r\n  }\r\n  match() {\r\n      this.matchSound.play();\r\n  }\r\n  victory() {\r\n      this.stopMusic();\r\n      this.victorySound.play();\r\n  }\r\n  gameOver() {\r\n      this.stopMusic();\r\n      this.gameOverSound.play();\r\n  }\r\n}\r\n//Creating a Game Class \r\nclass MixOrMatch {\r\n  constructor(totalTime, cards) {\r\n      this.cardsArray = cards;\r\n      this.totalTime = totalTime;\r\n      this.timeRemaining = totalTime;\r\n      this.timer = document.getElementById('time-remaining')\r\n      this.ticker = document.getElementById('flips');\r\n      this.cardScore = document.getElementById('score');\r\n      this.audioController = new AudioController();\r\n      this.score = 0;\r\n  }\r\n\r\n  startGame() {\r\n      this.totalClicks = 0;\r\n      this.timeRemaining = this.totalTime;\r\n      this.cardToCheck = null;\r\n      this.matchedCards = [];\r\n      this.busy = true;\r\n      setTimeout(() => {\r\n          this.audioController.startMusic();\r\n          this.shuffleCards(this.cardsArray);\r\n          this.countdown = this.startCountdown();\r\n          this.busy = false;\r\n      }, 500)\r\n      this.hideCards();\r\n      this.timer.innerText = this.timeRemaining;\r\n      this.ticker.innerText = this.totalClicks;\r\n  }\r\n  startCountdown() {\r\n      return setInterval(() => {\r\n          this.timeRemaining--;\r\n          this.timer.innerText = this.timeRemaining;\r\n          if(this.timeRemaining === 0)\r\n              this.gameOver();\r\n      }, 1000);\r\n  }\r\n  gameOver() {\r\n      clearInterval(this.countdown);\r\n      this.audioController.gameOver();\r\n      document.getElementById('game-over-text').classList.add('visible');\r\n  }\r\n  victory() {\r\n      clearInterval(this.countdown);\r\n      this.audioController.victory();\r\n      document.getElementById('victory-text').classList.add('visible');\r\n  }\r\n  hideCards() {\r\n      this.cardsArray.forEach(card => {\r\n          card.classList.remove('visible');\r\n          card.classList.remove('matched');\r\n      });\r\n  }\r\n  //Flipping a Card\r\n  flipCard(card) {\r\n      if(this.canFlipCard(card)) {\r\n          this.audioController.flip();\r\n          this.totalClicks++;\r\n          this.ticker.innerText = this.totalClicks;\r\n          card.classList.add('visible');\r\n\r\n          if(this.cardToCheck) {\r\n              this.checkForCardMatch(card);\r\n          } else {\r\n              this.cardToCheck = card;\r\n          }\r\n      }\r\n  }\r\n  //Checking card for match\r\n  checkForCardMatch(card) {\r\n      if(this.getCardType(card) === this.getCardType(this.cardToCheck))\r\n          {this.cardMatch(card, this.cardToCheck);\r\n            this.score = this.score+10;\r\n            this.cardScore.innerHTML = this.score;\r\n          }\r\n      else \r\n          this.cardMismatch(card, this.cardToCheck);\r\n\r\n      this.cardToCheck = null;\r\n  }\r\n  //Actual Matching Function\r\n  cardMatch(card1, card2) {\r\n      this.matchedCards.push(card1);\r\n      this.matchedCards.push(card2);\r\n      card1.classList.add('matched');\r\n      card2.classList.add('matched');\r\n      card1.classList.remove('hints');\r\n      card2.classList.remove('hints');\r\n      this.audioController.match();\r\n      if(this.matchedCards.length === this.cardsArray.length)\r\n          this.victory();\r\n  }\r\n  cardMismatch(card1, card2) {\r\n      this.busy = true;\r\n      setTimeout(() => {\r\n          card1.classList.remove('visible');\r\n          card2.classList.remove('visible');\r\n          this.busy = false;\r\n      }, 1000);\r\n  }\r\n  shuffleCards(cardsArray) { // Fisher-Yates Shuffle Algorithm.\r\n      for (let i = cardsArray.length - 1; i > 0; i--) {\r\n          let randIndex = Math.floor(Math.random() * (i + 1));\r\n          cardsArray[randIndex].style.order = i;\r\n          cardsArray[i].style.order = randIndex;\r\n      }\r\n  }\r\n  getCardType(card) {\r\n      return card.getElementsByClassName('memory-card-value')[0].src;\r\n  }\r\n  canFlipCard(card) {\r\n      return !this.busy && !this.matchedCards.includes(card) && card !== this.cardToCheck;\r\n  }\r\n}\r\n\r\nif (document.readyState == 'loading') {\r\n  document.addEventListener('DOMContentLoaded', ready);\r\n} else {\r\n  ready();\r\n}\r\n\r\nfunction ready() {\r\n  let overlays = Array.from(document.getElementsByClassName('overlay-text'));\r\n  let cards = Array.from(document.getElementsByClassName('memory-card'));\r\n  let game = new MixOrMatch(100, cards);\r\n  let hintButton = document.getElementById('hint-button');\r\n\r\n  hintButton.addEventListener('click',()=>{\r\n\r\n    let hintCards = Array.from(document.getElementsByClassName('hint'));\r\n    hintCards.forEach(hintCard => {\r\n      hintCard.classList.add('hints-memory-card');\r\n    });\r\n\r\n    setTimeout(() => {\r\n      let rotatedCard = Array.from(document.getElementsByClassName('hints-memory-card'));\r\n      rotatedCard.forEach(card => {\r\n        card.classList.remove('hints-memory-card');\r\n      });\r\n  }, 5000);\r\n\r\n\r\n  });\r\n\r\n  overlays.forEach(overlay => {\r\n      overlay.addEventListener('click', () => {\r\n          overlay.classList.remove('visible');\r\n          game.startGame();\r\n      });\r\n  });\r\n\r\n  cards.forEach(card => {\r\n      card.addEventListener('click', () => {\r\n          game.flipCard(card);\r\n      });\r\n  });\r\n}\r\n\r\n\n\n//# sourceURL=webpack://root/./scripts/Games/memoryGame.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./scripts/Games/memoryGame.js"]();
/******/ 	
/******/ })()
;