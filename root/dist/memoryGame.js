/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/Games/memoryGame.js":
/*!*************************************!*\
  !*** ./scripts/Games/memoryGame.js ***!
  \*************************************/
/***/ (() => {

eval("\n\n//audio controller for all kinds of moves and matches\n\nclass AudioController {\n  \n  constructor() {\n      this.bgMusic = new Audio('../../Assests/Audio/creepy.mp3');\n      this.flipSound = new Audio('../../Assests/Audio/flip.wav');\n      this.matchSound = new Audio('../../Assests/Audio/match.wav');\n      this.victorySound = new Audio('../../Assests/Audio/victory.wav');\n      this.gameOverSound = new Audio('../../Assests/Audio/gameOver.wav');\n      this.bgMusic.volume = 0.5;\n      this.bgMusic.loop = true;\n  }\n  startMusic() {\n      this.bgMusic.play();\n  }\n  stopMusic() {\n      this.bgMusic.pause();\n      this.bgMusic.currentTime = 0;\n  }\n  flip() {\n      this.flipSound.play();\n  }\n  match() {\n      this.matchSound.play();\n  }\n  victory() {\n      this.stopMusic();\n      this.victorySound.play();\n  }\n  gameOver() {\n      this.stopMusic();\n      this.gameOverSound.play();\n  }\n}\n//Creating a Game Class \nclass MixOrMatch {\n  constructor(totalTime, cards) {\n      this.cardsArray = cards;\n      this.totalTime = totalTime;\n      this.timeRemaining = totalTime;\n      this.timer = document.getElementById('time-remaining')\n      this.ticker = document.getElementById('flips');\n      this.cardScore = document.getElementById('score');\n      this.audioController = new AudioController();\n      this.score = 0;\n  }\n\n  startGame() {\n      this.totalClicks = 0;\n      this.timeRemaining = this.totalTime;\n      this.cardToCheck = null;\n      this.matchedCards = [];\n      this.busy = true;\n      setTimeout(() => {\n          this.audioController.startMusic();\n          this.shuffleCards(this.cardsArray);\n          this.countdown = this.startCountdown();\n          this.busy = false;\n      }, 500)\n      this.hideCards();\n      this.timer.innerText = this.timeRemaining;\n      this.ticker.innerText = this.totalClicks;\n  }\n  startCountdown() {\n      return setInterval(() => {\n          this.timeRemaining--;\n          this.timer.innerText = this.timeRemaining;\n          if(this.timeRemaining === 0)\n              this.gameOver();\n      }, 1000);\n  }\n  gameOver() {\n      clearInterval(this.countdown);\n      this.audioController.gameOver();\n      document.getElementById('game-over-text').classList.add('visible');\n  }\n  victory() {\n      clearInterval(this.countdown);\n      this.audioController.victory();\n      document.getElementById('victory-text').classList.add('visible');\n  }\n  hideCards() {\n      this.cardsArray.forEach(card => {\n          card.classList.remove('visible');\n          card.classList.remove('matched');\n      });\n  }\n  //Flipping a Card\n  flipCard(card) {\n      if(this.canFlipCard(card)) {\n          this.audioController.flip();\n          this.totalClicks++;\n          this.ticker.innerText = this.totalClicks;\n          card.classList.add('visible');\n\n          if(this.cardToCheck) {\n              this.checkForCardMatch(card);\n          } else {\n              this.cardToCheck = card;\n          }\n      }\n  }\n  //Checking card for match\n  checkForCardMatch(card) {\n      if(this.getCardType(card) === this.getCardType(this.cardToCheck))\n          {this.cardMatch(card, this.cardToCheck);\n            this.score = this.score+10;\n            this.cardScore.innerHTML = this.score;\n          }\n      else \n          this.cardMismatch(card, this.cardToCheck);\n\n      this.cardToCheck = null;\n  }\n  //Actual Matching Function\n  cardMatch(card1, card2) {\n      this.matchedCards.push(card1);\n      this.matchedCards.push(card2);\n      card1.classList.add('matched');\n      card2.classList.add('matched');\n      card1.classList.remove('hints');\n      card2.classList.remove('hints');\n      this.audioController.match();\n      if(this.matchedCards.length === this.cardsArray.length)\n          this.victory();\n  }\n  cardMismatch(card1, card2) {\n      this.busy = true;\n      setTimeout(() => {\n          card1.classList.remove('visible');\n          card2.classList.remove('visible');\n          this.busy = false;\n      }, 1000);\n  }\n  shuffleCards(cardsArray) { // Fisher-Yates Shuffle Algorithm.\n      for (let i = cardsArray.length - 1; i > 0; i--) {\n          let randIndex = Math.floor(Math.random() * (i + 1));\n          cardsArray[randIndex].style.order = i;\n          cardsArray[i].style.order = randIndex;\n      }\n  }\n  getCardType(card) {\n      return card.getElementsByClassName('memory-card-value')[0].src;\n  }\n  canFlipCard(card) {\n      return !this.busy && !this.matchedCards.includes(card) && card !== this.cardToCheck;\n  }\n}\n\nif (document.readyState == 'loading') {\n  document.addEventListener('DOMContentLoaded', ready);\n} else {\n  ready();\n}\n\nfunction ready() {\n  let overlays = Array.from(document.getElementsByClassName('overlay-text'));\n  let cards = Array.from(document.getElementsByClassName('memory-card'));\n  let game = new MixOrMatch(100, cards);\n  let hintButton = document.getElementById('hint-button');\n\n  hintButton.addEventListener('click',()=>{\n\n    let hintCards = Array.from(document.getElementsByClassName('hint'));\n    hintCards.forEach(hintCard => {\n      hintCard.classList.add('hints-memory-card');\n    });\n\n    setTimeout(() => {\n      let rotatedCard = Array.from(document.getElementsByClassName('hints-memory-card'));\n      rotatedCard.forEach(card => {\n        card.classList.remove('hints-memory-card');\n      });\n  }, 5000);\n\n\n  });\n\n  overlays.forEach(overlay => {\n      overlay.addEventListener('click', () => {\n          overlay.classList.remove('visible');\n          game.startGame();\n      });\n  });\n\n  cards.forEach(card => {\n      card.addEventListener('click', () => {\n          game.flipCard(card);\n      });\n  });\n}\n\n\n\n//# sourceURL=webpack://root/./scripts/Games/memoryGame.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./scripts/Games/memoryGame.js"]();
/******/ 	
/******/ })()
;