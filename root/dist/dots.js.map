{"version":3,"sources":["webpack://root/webpack/bootstrap","webpack://root/webpack/runtime/make namespace object","webpack://root/./scripts/Games/ConnectDotsGame/dots.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;UAAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;ACNwF;;;AAGxF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,mFAAU;AACtD;AACA,mBAAmB,aAAa;AAChC;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;AAKD;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD,sBAAsB;AACtB;;AAEA;AACA;AACA;;AAEA,mBAAmB,mFAAU;;AAE7B,0BAA0B,mFAAU;AACpC;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA,UAAU,sBAAsB,OAAO;AACvC;AACA,6BAA6B;AAC7B,mEAAmE;AACnE,uCAAuC;AACvC,wBAAwB;AACxB,6BAA6B;AAC7B;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB;AACnB,UAAU,sBAAsB;AAChC;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,cAAc;AACd,6CAA6C;AAC7C;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,KAAK,6BAA6B;AAClC;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA,mBAAmB,aAAa;AAChC;AACA,uBAAuB,aAAa;AACpC;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA,CAAC;;;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,C","file":"dots.js","sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import numberJson from '../../../Assests/dotsGameResource/images_json/numbersJson.json';\r\n\r\n\r\n//states\r\nlet resultArray;\r\nlet actualObject;\r\nlet score = 0;\r\nlet edges = 0;\r\nlet scaleofdevice = window.devicePixelRatio;\r\nlet hintsText;\r\n\r\n// Html Elements\r\nvar nextButton = document.getElementById('nextButton');\r\nvar checkButton = document.getElementById('check');\r\nvar scoreBar = document.getElementById('score');\r\nlet dotsNumber = 0;\r\nconst hint = document.getElementById(\"hintText\");\r\n//Canvas Info Object\r\nvar data = { //global variable set equal to object\r\n    canvas: null,\r\n    ctx: null,\r\n    clickedDot: null, //dot that was previously clicked--fromDot\r\n    dots: null\r\n};\r\n\r\n//creating the object that will hold result\r\nfunction resultObject(number) {\r\n    resultArray = JSON.parse(JSON.stringify(numberJson[number]));\r\n    let length = Object.keys(resultArray).length;\r\n    for (let i = 1; i <= length; i++) {\r\n        let indexElement = 'v' + i.toString();\r\n        for (let j = 1; j <= length; j++) {\r\n            let indexElement2 = 'v' + j.toString();\r\n            if (resultArray[indexElement][indexElement2] = 1) edges++;\r\n            resultArray[indexElement][indexElement2] = 0;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//Creating the array for the dots position\r\nfunction dotsIndex(arg) {\r\n\r\n    let dots = [];\r\n    let length = Object.keys(arg).length;\r\n    for (let i = 1; i <= length; i++) {\r\n        let indexElement = 'v' + i.toString();\r\n        var width = (arg[indexElement].cx / 1920) * data.canvas.width,\r\n            height = (arg[indexElement].cy / 1080) * data.canvas.height;\r\n        let index = {\r\n            x: width,\r\n            y: height\r\n        };\r\n        dots.push(index);\r\n    }\r\n    console.log(data.dots);\r\n    return dots;\r\n\r\n}\r\n\r\n\r\n\r\n//Dynamically changing the alphabet\r\nnextButton.addEventListener('click', () => {\r\n\r\n    prepCanvas();\r\n    initilizeDots();\r\n    drawDots();\r\n    data.clickedDot = null;\r\n});\r\n\r\n\r\n\r\n\r\n//finds whether or not two circles are colliding on the screen\r\nfunction circleCollision(c1, c2) {\r\n    var a = c1.r + c2.r,\r\n        x = c1.x - c2.x,\r\n        y = c1.y - c2.y;\r\n\r\n    if (a > Math.sqrt((x * x) + (y * y))) return true; //colliding\r\n    else return false; //not colliding\r\n}\r\n\r\nfunction initilizeDots() {\r\n    dotsNumber = Math.floor(Math.random() * 5);\r\n    console.log(dotsNumber);\r\n\r\n    actualObject = numberJson[dotsNumber];\r\n\r\n    data.dots = dotsIndex(numberJson[dotsNumber]);\r\n    resultObject(dotsNumber);\r\n    hintsText = dotsNumber;\r\n}\r\n//setup the canvas\r\nfunction prepCanvas() {\r\n    var res = window.devicePixelRatio || 1, scale = 1 / res;//resolution\r\n    data.canvas = document.getElementById('dots');\r\n    data.ctx = data.canvas.getContext('2d');\r\n    // data.canvas.width = window.innerWidth - 60;\r\n    // data.canvas.height = 645;\r\n    data.canvas.width =window.innerWidth * scale;\r\n    data.canvas.height =645 * scale;\r\n    // data.canvas.style.width =window.innerWidth *scale + 'px';\r\n    // data.canvas.style.height = window.innerHeight * scale + 'px';\r\n    // console.log(data.canvas.height);\r\n    data.ctx.scale(res, res);\r\n    data.canvas.addEventListener('mousedown', function (event) {\r\n        console.log(event.clientX, event.clientY);\r\n        checkForDot(event);\r\n    });\r\n}\r\n\r\n//draws the dots on the screen\r\nfunction drawDots() {\r\n    \r\n    var i = 0;\r\n    for (; i < data.dots.length; i++) { //loop \r\n        var d = data.dots[i];\r\n        data.ctx.beginPath(); //begin a new path\r\n        data.ctx.arc(d.x, d.y, 15 / scaleofdevice, 0, 2 * Math.PI); //arc(x position, y position, radius, arc start, arc end) --full circumference of circle\r\n        data.ctx.fillStyle = '#ffb900'; //grey color\r\n        data.ctx.fill(); //add fill to see on screen--set fillstyle\r\n        data.ctx.closePath(); //close the path\r\n    }\r\n    showHints();\r\n}\r\n\r\n\r\n//Score Counting \r\nfunction scoreCount(dot1, dot2) {\r\n\r\n\r\n    resultArray[dot1][dot2] = 1;\r\n    console.log(resultArray[dot1][dot2]);\r\n    resultArray[dot2][dot1] = 1;\r\n\r\n    console.log(resultArray);\r\n}\r\n\r\n//find the dots\r\nfunction findDots(dot1, dot2) {\r\n    let length = Object.keys(resultArray).length;\r\n    let d1, d2;\r\n    for (let i = 1; i <= length; i++) {\r\n        let indexElement = 'v' + i.toString();\r\n        var dotx = (resultArray[indexElement].cx / 1920) * data.canvas.width,\r\n            doty = (resultArray[indexElement].cy / 1080) * data.canvas.height;\r\n        if (dot1.x == dotx && dot1.y == doty) d1 = indexElement;\r\n        else if (dot2.x == dotx && dot2.y == doty) d2 = indexElement;\r\n    }\r\n    console.log(d1, d2);\r\n    scoreCount(d1, d2);\r\n}\r\n\r\n\r\n\r\nfunction startGame() {\r\n    resetValues();\r\n\r\n    score = 0;\r\n\r\n}\r\n//drawing the line to toDot\r\nfunction drawLine(toDot) {\r\n    data.ctx.beginPath();\r\n    data.ctx.moveTo(data.clickedDot.x, data.clickedDot.y);\r\n    data.ctx.lineTo(toDot.x, toDot.y);\r\n    data.ctx.lineWidth = 5;\r\n    data.ctx.strokeStyle = '#777';\r\n    data.ctx.stroke();\r\n    data.ctx.closePath();\r\n    findDots(toDot, data.clickedDot);\r\n}\r\n\r\n//check for clicked position  and actual dot colliding\r\nfunction checkForDot(event) {\r\n    var i = 0,\r\n        col = null; //collision dot (dot with which we collide)\r\n    for (; i < data.dots.length; i++) {\r\n        var d = data.dots[i], //dot at current index\r\n            c1 = {\r\n                x: d.x,\r\n                y: d.y,\r\n                r: 15 / scaleofdevice\r\n            }, //circle1 object\r\n            c2 = {\r\n                x: event.clientX / scaleofdevice,\r\n                y: event.clientY / scaleofdevice,\r\n                r: 15 / scaleofdevice\r\n            }; //circle2 object--touch\r\n        if (circleCollision(c1, c2)) col = d; //check if the circles are colliding-- if colliding, set collision dot = dot at current index\r\n    }\r\n\r\n    if (col !== null) { //colliding\r\n        if (data.clickedDot !== null) {\r\n            data.dots.fillStyle = 'black';\r\n            drawLine(col);\r\n        }\r\n        data.clickedDot = col; //save previous clicked dot\r\n    } else data.clickedDot = null; //not colliding on the screen--reset the line by clicking on empty space\r\n}\r\n\r\n\r\n//hint for the pattern\r\nfunction showHints(){\r\n    hint.innerHTML = hintsText;\r\n}\r\n\r\nwindow.onload = function () {\r\n    document.getElementById(\"strt\").addEventListener(\"click\", startGame);\r\n\r\n}\r\n\r\n\r\n//Score Check\r\ncheckButton.addEventListener('click', () => {\r\n    console.log(actualObject);\r\n    console.log(resultArray);\r\n    let length = Object.keys(resultArray).length;\r\n    for (let i = 1; i <= length; i++) {\r\n        let indexElement = 'v' + i.toString();\r\n        for (let j = 1; j <= length; j++) {\r\n            let indexElement2 = 'v' + j.toString();\r\n            if (resultArray[indexElement][indexElement2] == actualObject[indexElement][indexElement2]) score++;\r\n            if (resultArray[indexElement][indexElement2] != actualObject[indexElement][indexElement2]) score--;\r\n        }\r\n    }\r\n    scoreBar.innerHTML = Math.floor(score / edges * 10);\r\n\r\n\r\n    resetValues();\r\n\r\n})\r\n\r\n\r\n//reset\r\nfunction resetValues() {\r\n\r\n    data.clickedDot = null;\r\n    resultArray = null;\r\n    actualObject = null;\r\n    prepCanvas();\r\n    initilizeDots();\r\n    drawDots();\r\n}"],"sourceRoot":""}